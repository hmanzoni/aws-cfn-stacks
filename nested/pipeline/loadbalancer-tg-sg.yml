AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  AppName:
    Type: String
  VpcID:
    Type: AWS::EC2::VPC::Id
  DefSG:
    Type: AWS::EC2::SecurityGroup::Id
  SubnetIDs:
    Type: List<AWS::EC2::Subnet::Id>

Resources:
  SecurityGroupOpenAll:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AppName}-SG
      GroupDescription: Allow http to client host
      VpcId: !Ref VpcID
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIpv6: ::/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0

  myLoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Type: application
      Name: !Sub ${AppName}-LB
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets: !Ref SubnetIDs
      SecurityGroups:
        - !Ref SecurityGroupOpenAll
        - !Ref DefSG

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-TG
      TargetType: ip
      Protocol: HTTP
      Port: 80
      ProtocolVersion: HTTP1
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      VpcId: !Ref VpcID

  HTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref myLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref MyTargetGroup
                Weight: 1

Outputs:
  ARNTargetG:
    Value: !Ref MyTargetGroup
  SGOpenToAll:
    Value: !GetAtt SecurityGroupOpenAll.GroupId
  ELBDNSName:
    Value: !GetAtt myLoadBalancer.DNSName
