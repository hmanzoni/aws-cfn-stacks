AWSTemplateFormatVersion: "2010-09-09"
Description: Creation of a API Gateway RestAPI with enable CORS support and in association with a Lambda function.
Parameters:
  ArnLambdaFnAPI:
    Description: ARN from the AWS Lambda API created.
    Type: String
  DeployStageName:
    Description: Stage Name for ApiGateway Deployment.
    Type: String
    Default: v1
  ApiName:
    Description: Name for API Gateway.
    Type: String
    Default: api
  ApiResourcePath:
    Description: Name for API Gateway Resource Path.
    Type: String
    Default: v1
Resources:
  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ArnLambdaFnAPI
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApiGWResource}/${DeployStageName}/POST/*
  RestApiGWResource:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Description: !Sub Creation of ${ApiName}
      Name: !Ref ApiName
  RestApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref RestApiGWResource
      ParentId: !GetAtt
        - RestApiGWResource
        - RootResourceId
      PathPart: !Ref ApiResourcePath
  RestApiMethodOPTION:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref RestApiGWResource
      ResourceId: !Ref RestApiResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  RestApiMethodPOST:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref RestApiGWResource
      ResourceId: !Ref RestApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseTemplates:
              application/json: ""
            StatusCode: 200
        PassthroughBehavior: WHEN_NO_TEMPLATES
        Uri:
          Fn::Join:
            [
              "",
              [
                "arn:aws:apigateway:",
                Ref: "AWS::Region",
                ":lambda:path/2015-03-31/functions/",
                Ref: ArnLambdaFnAPI,
                "/invocations",
              ],
            ]
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
  Deployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: [RestApiMethodPOST, RestApiMethodOPTION]
    Properties:
      RestApiId: !Ref RestApiGWResource
      Description: !Ref DeployStageName
      StageName: !Ref DeployStageName
Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${RestApiGWResource}.execute-api.${AWS::Region}.amazonaws.com/${DeployStageName}/${ApiResourcePath}
