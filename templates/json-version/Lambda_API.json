{
  "Description": "Lambda function communicate the instructions from API to the State Machine",
  "Parameters": {
    "StateMachineARN": {
      "Description": "ARN from the AWS State Machine created.",
      "Type": "String"
    },
    "ArnLambdaRole": {
      "Description": "This ARN is needed for assosiate a role to the Lambda fn for handle the permissions.",
      "Type": "String"
    }
  },
  "Resources": {
    "LambdaApi": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.lambda_handler",
        "Code": {
          "ZipFile": {
            "Fn::Sub": "# This code is a bit ...messy and includes some workarounds\n# It functions fine, but needs some cleanup\n# Checked the DecimalEncoder and Checks workarounds 20200402 and no progression towards fix\n\nimport boto3, json, os, decimal\n\nSM_ARN = '${StateMachineARN}'\nsm = boto3.client('stepfunctions')\n\ndef lambda_handler(event, context):\n    # Print event data to logs .. \n    print(\"Received event: \" + json.dumps(event))\n\n    # Load data coming from APIGateway\n    data = json.loads(event['body'])\n    data['waitSeconds'] = int(data['waitSeconds'])\n    \n    # Sanity check that all of the parameters we need have come through from API gateway\n    # Mixture of optional and mandatory ones\n    checks = []\n    checks.append('waitSeconds' in data)\n    checks.append(type(data['waitSeconds']) == int)\n    checks.append('preference' in data)\n    checks.append('message' in data)\n    if data.get('preference') == 'sms':\n        checks.append('phone' in data)\n    if data.get('preference') == 'email':\n        checks.append('email' in data)\n\n    # if any checks fail, return error to API Gateway to return to client\n    if False in checks:\n        response = {\n            \"statusCode\": 400,\n            \"headers\": {\"Access-Control-Allow-Origin\":\"*\"},\n            \"body\": json.dumps( { \"Status\": \"Success\", \"Reason\": \"Input failed validation\" }, cls=DecimalEncoder )\n        }\n    # If none, start the state machine execution and inform client of 2XX success :)\n    else: \n        sm.start_execution( stateMachineArn=SM_ARN, input=json.dumps(data, cls=DecimalEncoder) )\n        response = {\n            \"statusCode\": 200,\n            \"headers\": {\"Access-Control-Allow-Origin\":\"*\"},\n            \"body\": json.dumps( {\"Status\": \"Success\"}, cls=DecimalEncoder )\n        }\n    return response\n\n# This is a workaround for: http://bugs.python.org/issue16535\n# Solution discussed on this thread \n# https://stackoverflow.com/questions/11942364/typeerror-integer-is-not-json-serializable-when-serializing-json-in-python\n# https://stackoverflow.com/questions/1960516/python-json-serialize-a-decimal-object\n# Credit goes to the group :)\nclass DecimalEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, decimal.Decimal):\n            return int(obj)\n        return super(DecimalEncoder, self).default(obj)\n"
          }
        },
        "Runtime": "python3.9",
        "Role": {
          "Ref": "ArnLambdaRole"
        }
      }
    }
  },
  "Outputs": {
    "ArnLambdaFnAPI": {
      "Description": "The value of ARN will be use for the API Gateway",
      "Value": {
        "Fn::GetAtt": ["LambdaApi", "Arn"]
      }
    }
  }
}
